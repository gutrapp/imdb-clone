generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?   @default("Anonymus Movie Reviewer")
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    favorites     Movie[]
    reviews       Review[]
    comments      Comment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Movie {
    id          String   @id @default(cuid())
    user_id     String
    name        String   @unique
    description String
    trailer     String
    genres      Int[]
    reviews     Review[]
    User        User?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Review {
    id       String    @id @default(cuid())
    user_id  String
    movie_id String
    title    String    @unique
    content  String
    rating   Int
    comments Comment[]
    User     User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
    Movie    Movie?    @relation(fields: [movie_id], references: [id], onDelete: Cascade)
}

model Comment {
    id        String  @id @default(cuid())
    user_id   String
    review_id String
    content   String
    User      User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)
    Review    Review? @relation(fields: [review_id], references: [id], onDelete: Cascade)
}
